继承
1、java中一个类智能扩展一个类（单继承）、使用接口实现多继承
2、访问控制符：private、public、protected、default
3、方法的覆盖和重载：重载发生在类的内部或子类和父类之间、覆盖指的是子类和父类中包含相同方法
4、类型转换:向上转换、向下转换
  只有父类引用已经指向子类实例时，才允许向下转换成子类。
5、instanceof：用来测试对象是否为某种特定类型

错误处理
1、try_catch_finally：
  （1）将可能导致错误的代码隔离到try块中
  （2）对于每个catch块，都要编写如果发生特定类型的异常要执行的代码
  （3）在finally块中，要编写无论是否出错都要运行的代码
2、try_with_resource：
    Connection connection=null;
    try(Connection connectiom=openConnection();//open other resource,if any)
        {
          //do something with connection
        }
    catch(SQLException e){
    }
3、如果有数个catch块，其中一个catch块的异常类型是从另一个catch块的类型衍生来的，那么要保证更具体的异常类型放在前面。
  捕捉Exception的catch块必须放到最后，如果其他的catch块没有捕获异常，最后的catch将会进行捕捉。
4、自定义异常：是定义一个继承自Exception类的子类。一般情况下我们都会直接继承自Exception类，而不会继承某个运行时的异常类。
    创建自定义异常：
    public class MyException extends Exception{
        public MyException(){
            super();
        }
       public MyException(String msg){
        super(msg);
        }
    }
    在类中使用异常：
    public class ExceptionTest {
       public static void execute(String a) throws MyException {
            System.out.println("execute...");
            if("true".equals(a)){
                throw new MyException("参数不能为 true");
           }
       }
    }


数字和日期
1、数字格式化
    import java.text.NumberFormat;
    import java.util.Locale;
    public class NumberFormatTest{
      public static void main(String[] args){
        NumberFormat nf=NumberFormat.getInstance(Locale.US);
        System.out.println(nf.getClass().getName());
        System.out.println(nf.format(123445));
      }
    }
    
  输出：
  java.text.DecimalFormat
  123,445
2、java.util.Date通常用来表示日期和时间，java.util.Calendar用来操作日期

接口和抽象类
1、接口：更好的定义应该是协议，是服务提供者（服务器）和服务的用户（客户端）之间的一个协议。驱动程序就是来实现相应的接口。
2、接口是创建对象的模板，和普通类不同的是接口不能被实例化，它只是定义了java类可以实现的一组方法。实现类必须要覆盖接口中的所有方法。
3、抽象类的作用和接口类似，即它也提供服务提供者和其客户端之间的协议，但是抽象类同时还能提供部分实现。必须用显式的方法可以声明为abstract
。不过仍然需要创建实现类，因为抽象类不能被实例化，但无需覆盖不想使用或者不想修改的方法。
4、抽象类的具体实现类必须覆盖所有的抽象类，否则必须声明为abstract

枚举
1、public enum Color{
        Red,
        White,
        black,
        yellow
  }
使用：Color color=Color.Red;
