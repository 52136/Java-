集合框架
1、集合是把其他对象组合到一起的一个对象，也可以认为是它是一个容器，提供存储、检索和操作其元素的方法。
2、Map中不能包含重复键，每个键最多只能映射到一个值。注意，键和值都不能是基本类型，当插入基本类型时，在填入之前会对数据进行装箱处理。
3、Comparable和Comparator：实现java.lang.Comparable使你可以定义一个对类的实例进行比较的方法。当需要使用多种方式进行比较时，则需采用
Comparator，它来定义两个对象怎样进行比较。要使两个对象可以在两个方面进行比较时，就需要两个比较器。

泛型
1、泛型类型可以接受参数，这也正是泛型类型经常被称为参数化类型的原因。泛型将引用类型放到尖括号里传递给泛型类型。
2、在泛型中使用？通配符、界通配符（上界extends、下界super）
3、泛型point类
**********************************************
  public class Point<T>{
    T x;
    T y;
    public Point(T x,T y){
      this.x=x;
      this.y=y;
    }
    public T getX(){
      return x;
    }
    public T getY(){
      return y;
    }
    public void setX(T x){
      this.x=x;
    }
    public void setY(T y){
      this.y=y;
    }
  }
  
  泛型使用：
  Point<Integer> point1=new Point<>(4,2);
  point1.setX(7);
  Point<Double> point2=new Point<>(1.3,2.6);
  point2.setX(109.91);
4、泛型的优点
  （1）在编译时增加了对集合类型的类型检查，这样集合可以保存的对象类型就限制为传递给它的类型。
  （2）泛型使得在检索集合的元素时不用进行类型转换。

输入/输出
1、一个文件系统包含三种类型的对象：文件、目录、符号链接
2、java.nio.file.Files是一个非常强大的类，它提供了处理文件和目录以及读取文件和写入文件的静态方法。
3、Files提供了文件目录创建（createFile、createDictory）、复制和移动文件（copy、move）、文件的读取和写入（readAllBytes、readAllLines、
write）。
4、java.nio.charset是一个表示字符集的抽象类，需要指对在将字符编码成字节或字节编码成字符时使用的字符集。
5、输入/输出流：Reader/Writer是面向字符流的，用于读取和写入字符（文本）的流，InputStream/OutputStream是面向字节流的，用于读取和写入二进制数据。
6、OutputStreamWriter是字符流和字节流之间的桥梁。printWriter使用起来会比OutStreamWriter更加方便，前者增加了9个print方法重载，用来输出
任意类型的java基本类型和对象。
7、InputStreamReader：读取字节，并使用指定的字符集将他们转换成字符。
8、BufferReader的优点：提供高性能的缓存，提供readLine方法来读取文本行。
9、PrintStream用来记录日志。
10、随机访问文件：java.io.RandomAccessFile类和SeekableByteChannel接口。
11、对象序列化：使用ObjectOutputStream来进行对象的序列化，将对象保存到永久存储器中。使用ObjectInputStream来进行对象的反序列化，来检索
永久存储的对象。
为了实现对象的序列化，必须实现java.io.Serializable接口。
